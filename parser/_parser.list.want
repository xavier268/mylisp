Test name : TestParserList
This file : _parser.list.want

0: input : <() ; should fail, because () is not ( )>
0: result raw: <parser.Atom{Value:"()"}>
0: result str: <()>

1: input : <( )>
1: result raw: <parser.Cell{Car:parser.Term(nil), Cdr:parser.Term(nil)}>
1: result str: <()>

2: input : <'( )>
2:	 ********** error: error : [parse error in test string #2, pos 4 : syntax error: unexpected ')']
2: result raw: <parser.Atom{Value:"'("}>
2: result str: <'(>

3: input : <( un deux )>
3: result raw: <parser.Cell{Car:parser.Atom{Value:"un"}, Cdr:parser.Cell{Car:parser.Atom{Value:"deux"}, Cdr:parser.Term(nil)}}>
3: result str: <( un deux )>

4: input : <( un . deux )>
4: result raw: <parser.Cell{Car:parser.Atom{Value:"un"}, Cdr:parser.Atom{Value:"deux"}}>
4: result str: <( un . deux )>

5: input : <( un ' deux )>
5: result raw: <parser.Cell{Car:parser.Atom{Value:"un"}, Cdr:parser.Cell{Car:parser.Cell{Car:parser.Atom{Value:"tick"}, Cdr:parser.Atom{Value:"deux"}}, Cdr:parser.Term(nil)}}>
5: result str: <( un ( tick . deux ) )>

6: input : <'( un  deux )>
6:	 ********** error: error : [parse error in test string #6, pos 5 : syntax error: unexpected IDENT]
6: result raw: <parser.Atom{Value:"'("}>
6: result str: <'(>

7: input : <( un deux trois )>
7: result raw: <parser.Cell{Car:parser.Atom{Value:"un"}, Cdr:parser.Cell{Car:parser.Atom{Value:"deux"}, Cdr:parser.Cell{Car:parser.Atom{Value:"trois"}, Cdr:parser.Term(nil)}}}>
7: result str: <( un deux trois )>

8: input : <( un ( deux ) trois )>
8: result raw: <parser.Cell{Car:parser.Atom{Value:"un"}, Cdr:parser.Cell{Car:parser.Cell{Car:parser.Atom{Value:"deux"}, Cdr:parser.Term(nil)}, Cdr:parser.Cell{Car:parser.Atom{Value:"trois"}, Cdr:parser.Term(nil)}}}>
8: result str: <( un ( deux ) trois )>

9: input : <( un ( deux () ) trois )>
9: result raw: <parser.Cell{Car:parser.Atom{Value:"un"}, Cdr:parser.Cell{Car:parser.Cell{Car:parser.Atom{Value:"deux"}, Cdr:parser.Cell{Car:parser.Atom{Value:"()"}, Cdr:parser.Term(nil)}}, Cdr:parser.Cell{Car:parser.Atom{Value:"trois"}, Cdr:parser.Term(nil)}}}>
9: result str: <( un ( deux () ) trois )>

10: input : < (un . ( deux . ( trois . () ) ) )>
10:	 ********** error: error : [parse error in test string #10, pos 6 : syntax error: unexpected '.']
10: result raw: <parser.Atom{Value:"(un"}>
10: result str: <(un>

11: input : < (un . ( deux . ( trois .  ) ) )>
11:	 ********** error: error : [parse error in test string #11, pos 6 : syntax error: unexpected '.']
11: result raw: <parser.Atom{Value:"(un"}>
11: result str: <(un>

